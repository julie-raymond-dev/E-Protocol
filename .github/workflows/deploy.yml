name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

# Permissions sécurisées
permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write
  checks: write

# Éviter les déploiements concurrents
concurrency:
  group: "ci-cd-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  # ============================================================================
  # 🧪 ÉTAPE 1: TESTS ET VALIDATION
  # ============================================================================
  test-and-validate:
    name: 🧪 Test & Validate
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 📦 Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          
      - name: 📦 Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --audit --fund=false
        
      - name: 🔍 Run ESLint
        run: |
          echo "🔍 Running ESLint validation..."
          npm run lint
        
      - name: 🏗️ Test build
        run: |
          echo "🏗️ Testing build process..."
          npm run build
          echo "✅ Build test successful"

  # ============================================================================
  # 🔒 ÉTAPE 2: AUDIT DE SÉCURITÉ
  # ============================================================================
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    needs: test-and-validate
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Restore dependencies
        run: npm ci --audit --fund=false

      - name: �️ Run security audit
        run: |
          echo "🛡️ Running security audit..."
          npm audit --audit-level=moderate
          
      - name: 📊 Generate security report
        run: |
          echo "📊 Generating security report..."
          npm audit --json > security-report.json || true
          
      - name: 📤 Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report-${{ github.run_number }}
          path: security-report.json
          retention-days: 30

  # ============================================================================
  # 🚦 ÉTAPE 3: PERFORMANCE (PR uniquement)
  # ============================================================================
  performance-check:
    name: 🚦 Performance Check
    runs-on: ubuntu-latest
    needs: test-and-validate
    if: github.event_name == 'pull_request'
    
    steps:
      - name: � Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build for Lighthouse
        run: npm run build

      - name: 🚦 Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun || echo "Lighthouse CI completed with warnings"
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # 🚀 ÉTAPE 4: DÉPLOIEMENT (main branch uniquement)
  # ============================================================================
  deploy:
    name: 🚀 Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [test-and-validate, security-audit]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci --audit --fund=false
        
      - name: 🏗️ Build application
        run: npm run build
        env:
          NODE_ENV: production
          VITE_AUTH0_DOMAIN: ${{ secrets.VITE_AUTH0_DOMAIN }}
          VITE_AUTH0_CLIENT_ID: ${{ secrets.VITE_AUTH0_CLIENT_ID }}
          
      - name: 🔒 Security check - Verify dist folder
        run: |
          if [ ! -d "dist" ]; then
            echo "❌ Build failed: dist folder not found"
            exit 1
          fi
          echo "✅ Build successful: dist folder exists"
          ls -la dist/
          du -sh dist/
          
      - name: 🛡️ Setup Pages security
        uses: actions/configure-pages@v4
        
      - name: 📤 Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'
          
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 🎉 Deployment summary
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "📍 URL: ${{ steps.deployment.outputs.page_url }}"
          echo "🏗️ Build size: $(du -sh dist/ | cut -f1)"
          echo "⏰ Deployed at: $(date)"

  # ============================================================================
  # 🤖 ÉTAPE 5: AUTO-MERGE DEPENDABOT (optionnel)
  # ============================================================================
  auto-merge-dependabot:
    name: 🤖 Auto-merge Dependabot
    runs-on: ubuntu-latest
    needs: [test-and-validate, security-audit]
    if: github.actor == 'dependabot[bot]' && github.event_name == 'pull_request'
    
    steps:
      - name: 🤖 Enable auto-merge for Dependabot PRs
        run: gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
